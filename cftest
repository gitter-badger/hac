#!/usr/bin/env python
# coding=utf-8
#
# cftest - CLI tool for testing solutions to problems from http://www.codeforces.com
# Copyright (C) 2014-2015  Zoran Plesivƒçak <zplesiv@gmail.com>
# This software is distributed under the terms of the MIT License.
#

import sys
import argparse
import re

# Python2 and Python3 compatibility
try:
    from urllib2 import urlopen
    from HTMLParser import HTMLParser
except:
    from urllib.request import urlopen
    from html.parser import HTMLParser

# Default configuration
DEFAULT_LANGUAGES = ["cpp"]


# -----------------------------------------------------------------------------

# Construct parser
parser = argparse.ArgumentParser(
    description=
        """Select contest (number) and optionally problems (letters) for which
        to prepare testing environment in current directory.
        """,
    epilog="Examples..."
)
parser.add_argument("CONTEST", help="Codeforces contest number")
parser.add_argument("PROBLEMS", action="append", type=str, nargs="*",
    help="Problems' letters (Defaults to all problems)")
parser.add_argument(
    "-d", "--create-subdir", action="count", default=0,
    help=
        """Create additional level of sub-directories (can be given multiple
        times, max. 2 times have effect)"""
)
parser.add_argument(
    "-l", "--lang", action="append", choices=["py", "cpp"], default=[],
    help="Languages for which test environment will be prepared (Default: " +
        str(DEFAULT_LANGUAGES) + ")"
)

# Parse and normalize CLI arguments
args = parser.parse_args()
args.lang = sorted(set(args.lang)) if args.lang else DEFAULT_LANGUAGES
args.PROBLEMS = sorted(set(''.join(args.PROBLEMS[0])))

# -----------------------------------------------------------------------------

# Contest parser class
class CodeforcesContestParser(HTMLParser):

    def __init__(self, contest):
        HTMLParser.__init__(self)
        self.contest = contest
        self.start_contest = False
        self.start_problem = False
        self.name = ''
        self.problems = []
        self.problem_names = []

    def handle_starttag(self, tag, attrs):
        if self.name == '' and attrs == [('style', 'color: black'), ('href', '/contest/%s' % (self.contest))]:
                self.start_contest = True
        elif tag == 'option':
            if len(attrs) == 1:
                regexp = re.compile(r"'[A-Z]'")
                string = str(attrs[0])
                search = regexp.search(string)
                if search is not None:
                    self.problems.append(search.group(0).split("'")[-2])
                    self.start_problem = True

    def handle_endtag(self, tag):
        if tag == 'a' and self.start_contest:
            self.start_contest = False
        elif self.start_problem:
            self.start_problem = False

    def handle_data(self, data):
        if self.start_contest:
            self.name = data
        elif self.start_problem:
            self.problem_names.append(data)

# Parses the contest page
def parse_contest(contest):
    url = 'http://codeforces.com/contest/{0}'.format(contest)
    html = urlopen(url).read()
    parser = CodeforcesContestParser(contest)
    parser.feed(html.decode('utf-8'))
    return parser

# -----------------------------------------------------------------------------

if __name__ == "__main__":
    # When no arguments given show Help
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    print(args.create_subdir)
    print(args.lang)
    print(args.CONTEST)
    print(args.PROBLEMS)
    allc = parse_contest(args.CONTEST)

    print(allc.contest)
    print(allc.start_contest)
    print(allc.start_problem)
    print(allc.name)
    print(allc.problems)
    print(allc.problem_names)
